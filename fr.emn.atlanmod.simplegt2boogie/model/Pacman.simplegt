module pacman;


metamodel pacman : 'platform:/resource/Pacman/metamodels/Pacman.ecore';
transform b : pacman;


rule PlayerMoveLeft{
	from
		s : pacman!GameState(STATE=~3, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasPlayer=~pac, left=~grid2),
		act : pacman!Action(DONEBY=~1, FRAME=~rec.FRAME, DIRECTION=~1)
	not grid2: pacman!Grid(hasEnemy=~ghost), ghost: pacman!Ghost
	to 
		s : pacman!GameState(STATE=~4, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid(hasPlayer=~pac),
		grid1: pacman!Grid(left=~grid2)
}

rule PlayerMoveRight{
	from
		s : pacman!GameState(STATE=~3, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasPlayer=~pac, right=~grid2),
		act : pacman!Action(DONEBY=~1, FRAME=~rec.FRAME, DIRECTION=~2)
	not grid2: pacman!Grid(hasEnemy=~ghost), ghost: pacman!Ghost
	to 
		s : pacman!GameState(STATE=~4, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid(hasPlayer=~pac),
		grid1: pacman!Grid(right=~grid2)
}

rule PlayerMoveTop{
	from
		s : pacman!GameState(STATE=~3, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasPlayer=~pac, top=~grid2),
		act : pacman!Action(DONEBY=~1, FRAME=~rec.FRAME, DIRECTION=~3)
	not grid2: pacman!Grid(hasEnemy=~ghost), ghost: pacman!Ghost
	to 
		s : pacman!GameState(STATE=~4, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid(hasPlayer=~pac),
		grid1: pacman!Grid(top=~grid2)
}

rule PlayerMoveBottom{
	from
		s : pacman!GameState(STATE=~3, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasPlayer=~pac, bottom=~grid2),
		act : pacman!Action(DONEBY=~1, FRAME=~rec.FRAME, DIRECTION=~4)
	not grid2: pacman!Grid(hasEnemy=~ghost), ghost: pacman!Ghost
	to 
		s : pacman!GameState(STATE=~4, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid2: pacman!Grid(hasPlayer=~pac),
		grid1: pacman!Grid(bottom=~grid2)
}

rule PlayerStay{
	from
		s : pacman!GameState(STATE=~3, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid1: pacman!Grid(hasPlayer=~pac),
		act : pacman!Action(DONEBY=~1, FRAME=~rec.FRAME, DIRECTION=~5)
	to 
		s : pacman!GameState(STATE=~4, record=~rec),
		rec: pacman!Record,
		pac: pacman!Pacman,
		grid1: pacman!Grid(hasPlayer=~pac)
}

rule ghostMoveLeft{
	from
		s : pacman!GameState(STATE=~4,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasEnemy=~ghost, left=~grid2),
		act : pacman!Action(DONEBY=~2, FRAME=~rec.FRAME, DIRECTION=~1)
	to 
		s : pacman!GameState(STATE=~5,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid(hasEnemy=~ghost),
		grid1: pacman!Grid(left=~grid2)
}

rule ghostMoveRight{
	from
		s : pacman!GameState(STATE=~4,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasEnemy=~ghost, right=~grid2),
		act : pacman!Action(DONEBY=~2, FRAME=~rec.FRAME, DIRECTION=~2)
	to 
		s : pacman!GameState(STATE=~5,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid(hasEnemy=~ghost),
		grid1: pacman!Grid(right=~grid2)
}

rule ghostMoveTop{
	from
		s : pacman!GameState(STATE=~4,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasEnemy=~ghost, top=~grid2),
		act : pacman!Action(DONEBY=~2, FRAME=~rec.FRAME, DIRECTION=~3)
	to 
		s : pacman!GameState(STATE=~5,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid(hasEnemy=~ghost),
		grid1: pacman!Grid(top=~grid2)
}

rule ghostMoveBottom{
	from
		s : pacman!GameState(STATE=~4,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid,
		grid1: pacman!Grid(hasEnemy=~ghost, bottom=~grid2),
		act : pacman!Action(DONEBY=~2, FRAME=~rec.FRAME, DIRECTION=~4)
	to 
		s : pacman!GameState(STATE=~5,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid2: pacman!Grid(hasEnemy=~ghost),
		grid1: pacman!Grid(bottom=~grid2)
}

rule ghostStay{
	from
		s : pacman!GameState(STATE=~4,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid1: pacman!Grid(hasEnemy=~ghost),
		act : pacman!Action(DONEBY=~2, FRAME=~rec.FRAME, DIRECTION=~5)
	to 
		s : pacman!GameState(STATE=~5,record=~rec),
		rec: pacman!Record,
		ghost: pacman!Ghost,
		grid1: pacman!Grid(hasEnemy=~ghost)
}


rule Collect{
	from
		s : pacman!GameState(STATE=~5,record=~rec),
		rec : pacman!Record,
		pac: pacman!Pacman,
		gem: pacman!Gem,
		grid : pacman!Grid(hasPlayer=~pac, hasGem=~gem)
	to 
		s : pacman!GameState(STATE=~5,record=~recNew),
		grid : pacman!Grid(hasPlayer=~pac),
		pac: pacman!Pacman,
		recNew: pacman!Record(FRAME=~rec.FRAME, SCORE=~rec.SCORE+100)
}



rule Kill{
	from
		s : pacman!GameState(STATE=~5),
		ghost: pacman!Ghost,
		pac : pacman!Pacman,
		grid : pacman!Grid (hasPlayer=~pac, hasEnemy=~ghost)	
	to
		s: pacman!GameState(STATE=~6),
		ghost: pacman!Ghost,
		grid : pacman!Grid (hasEnemy=~ghost)
}



rule UpdateFrame{
	from
		s : pacman!GameState(STATE=~5,record=~rec),
		rec : pacman!Record,
		pac : pacman!Pacman
	to
		s: pacman!GameState(STATE=~3,record=~recNew),
		pac : pacman!Pacman,
		recNew: pacman!Record(FRAME=~rec.FRAME+1, SCORE=~rec.SCORE)
}


